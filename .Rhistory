source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m1)
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m1)
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
x$setinv(m)
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
x <<- y
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
source('C:/Users/Ge/Desktop/Curso R/ProgrammingAssignment2/cachematrix.R')
set<- function(y = matrix()) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set<- function(y = matrix()) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
mat<-matrix(c(1,4,9,0,-3,2,2,7,8),3,3)
mat
m1<-makeCacheMatrix(mat)
cacheSolve(m1)
